name: CI
on:
  - pull_request
jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    # build-tools is built from ../../tools/build-tools.Dockerfile
    container: ghcr.io/kedacore/build-tools:main
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - id: go-paths
        run: |
          echo ::set-output name=mod_cache::$(go env GOMODCACHE)
          echo ::set-output name=build_cache::$(go env GOCACHE)

      - name: Go modules cache
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.go-paths.outputs.mod_cache }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Go build cache
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.go-paths.outputs.build_cache }}
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}

      - name: Go modules sync
        run: go mod tidy

      - name: Verify Generated clientset is up to date
        run: make clientset-verify

      - name: Test
        run: make test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          # Username used to log in to a Docker registry. If not set then no login will occur
          username: ${{ github.repository_owner }}
          # Password or personal access token used to log in to a Docker registry. If not set then no login will occur
          password: ${{ secrets.GHCR_AUTH_PAT }}
          # Server address of Docker registry. If not set then will default to Docker Hub
          registry: ghcr.io

      - name: Login to Docker Hub
        env:
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: echo $DOCKER_HUB_ACCESS_TOKEN | docker login -u $DOCKER_HUB_USERNAME --password-stdin

      - name: Publish on GitHub Container Registry
        run: make publish

      - name: Publish on Docker Hub
        run: make publish-dockerhub

      - name: Run end to end tests
        env:
          AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_SP_ID: ${{ secrets.AZURE_SP_ID }}
          AZURE_SP_KEY: ${{ secrets.AZURE_SP_KEY }}
          AZURE_SP_TENANT: ${{ secrets.AZURE_SP_TENANT }}
          TEST_STORAGE_CONNECTION_STRING: ${{ secrets.TEST_STORAGE_CONNECTION_STRING }}
          TEST_LOG_ANALYTICS_WORKSPACE_ID: ${{ secrets.TEST_LOG_ANALYTICS_WORKSPACE_ID }}
          OPENSTACK_USER_ID: ${{ secrets.OPENSTACK_USER_ID }}
          OPENSTACK_PASSWORD: ${{ secrets.OPENSTACK_PASSWORD }}
          OPENSTACK_PROJECT_ID: ${{ secrets.OPENSTACK_PROJECT_ID }}
          OPENSTACK_AUTH_URL: ${{ secrets.OPENSTACK_AUTH_URL }}
          AZURE_DEVOPS_BUILD_DEFINITON_ID: ${{ secrets.AZURE_DEVOPS_BUILD_DEFINITON_ID }}
          AZURE_DEVOPS_ORGANIZATION_URL: ${{ secrets.AZURE_DEVOPS_ORGANIZATION_URL }}
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
          AZURE_DEVOPS_POOL_NAME: ${{ secrets.AZURE_DEVOPS_POOL_NAME }}
          AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
        run: make e2e-test

  statics:
    name: Static Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2.2.2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Get golangci
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.42.0
      - uses: pre-commit/action@v2.0.3

  codeScanning:
    name: Code Scanning
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['go']
        # Learn more... https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2

    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
